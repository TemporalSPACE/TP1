
TP1_ejer3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087c  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cd  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	52 00       	.word	0x0052	; ????
  6a:	55 00       	.word	0x0055	; ????
  6c:	58 00       	.word	0x0058	; ????
  6e:	5b 00       	.word	0x005b	; ????
  70:	5e 00       	.word	0x005e	; ????
  72:	61 00       	.word	0x0061	; ????
  74:	64 00       	.word	0x0064	; ????
  76:	67 00       	.word	0x0067	; ????
  78:	6a 00       	.word	0x006a	; ????
  7a:	6d 00       	.word	0x006d	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <dibujarDigito>:
#include <avr/io.h> // Definici?n de Registros del microcontrolador
#define F_CPU 16000000UL // Especifico la frecuencia de reloj del MCU en 16MHz
#include <util/delay.h> // Retardos por software ? Macros: depende de F_CPU

void dibujarDigito(int num){
	switch (num){
  94:	8a 30       	cpi	r24, 0x0A	; 10
  96:	91 05       	cpc	r25, r1
  98:	10 f5       	brcc	.+68     	; 0xde <dibujarDigito+0x4a>
  9a:	fc 01       	movw	r30, r24
  9c:	ec 5c       	subi	r30, 0xCC	; 204
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__tablejump2__>
		case 0:
		PORTB = 0b00111111;
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	85 b9       	out	0x05, r24	; 5
		break;
  a8:	08 95       	ret
		case 1:
		PORTB = 0b00000110;
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	85 b9       	out	0x05, r24	; 5
		break;
  ae:	08 95       	ret
		case 2:
		PORTB = 0b01011011;
  b0:	8b e5       	ldi	r24, 0x5B	; 91
  b2:	85 b9       	out	0x05, r24	; 5
		break;
  b4:	08 95       	ret
		case 3:
		PORTB = 0b01001111;
  b6:	8f e4       	ldi	r24, 0x4F	; 79
  b8:	85 b9       	out	0x05, r24	; 5
		break;
  ba:	08 95       	ret
		case 4:
		PORTB = 0b01100110;
  bc:	86 e6       	ldi	r24, 0x66	; 102
  be:	85 b9       	out	0x05, r24	; 5
		break;
  c0:	08 95       	ret
		case 5:
		PORTB = 0b01101101;
  c2:	8d e6       	ldi	r24, 0x6D	; 109
  c4:	85 b9       	out	0x05, r24	; 5
		break;
  c6:	08 95       	ret
		case 6:
		PORTB = 0b01111101;
  c8:	8d e7       	ldi	r24, 0x7D	; 125
  ca:	85 b9       	out	0x05, r24	; 5
		break;
  cc:	08 95       	ret
		case 7:
		PORTB = 0b00000111;
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	85 b9       	out	0x05, r24	; 5
		break;
  d2:	08 95       	ret
		case 8:
		PORTB = 0b01111111;
  d4:	8f e7       	ldi	r24, 0x7F	; 127
  d6:	85 b9       	out	0x05, r24	; 5
		break;
  d8:	08 95       	ret
		case 9:
		PORTB = 0b01101111;
  da:	8f e6       	ldi	r24, 0x6F	; 111
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <main>:

/* Funci?n main */
int main (void)
{
	/* Setup */
	DDRC = 0xFF; // seteo todo como salida
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // Setea el puerto B como salida
  e4:	84 b9       	out	0x04, r24	; 4
	/* Loop */
	//char num = 0;
	char q;
	int cont = 0;
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0

	while(1)
	{
		q = 0b00000001;

		PORTC = q;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	88 b9       	out	0x08, r24	; 8
		dibujarDigito((cont / 1000)%10);
  ee:	ce 01       	movw	r24, r28
  f0:	68 ee       	ldi	r22, 0xE8	; 232
  f2:	73 e0       	ldi	r23, 0x03	; 3
  f4:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
  f8:	cb 01       	movw	r24, r22
  fa:	0a e0       	ldi	r16, 0x0A	; 10
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	b8 01       	movw	r22, r16
 100:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 104:	0e 94 4a 00 	call	0x94	; 0x94 <dibujarDigito>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f e7       	ldi	r18, 0x7F	; 127
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x2e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x38>
 118:	00 00       	nop
		_delay_ms(25);
		q = (q << 1);

		PORTC = q;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	88 b9       	out	0x08, r24	; 8
		dibujarDigito((cont / 100)%10);
 11e:	ce 01       	movw	r24, r28
 120:	64 e6       	ldi	r22, 0x64	; 100
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 128:	cb 01       	movw	r24, r22
 12a:	b8 01       	movw	r22, r16
 12c:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 130:	0e 94 4a 00 	call	0x94	; 0x94 <dibujarDigito>
 134:	2f e7       	ldi	r18, 0x7F	; 127
 136:	88 e3       	ldi	r24, 0x38	; 56
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x5a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x64>
 144:	00 00       	nop
		_delay_ms(25);
		q = (q << 1);

		PORTC = q;
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	88 b9       	out	0x08, r24	; 8
		dibujarDigito((cont / 10)%10);
 14a:	ce 01       	movw	r24, r28
 14c:	b8 01       	movw	r22, r16
 14e:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 152:	7c 01       	movw	r14, r24
 154:	cb 01       	movw	r24, r22
 156:	b8 01       	movw	r22, r16
 158:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
 15c:	0e 94 4a 00 	call	0x94	; 0x94 <dibujarDigito>
 160:	2f e7       	ldi	r18, 0x7F	; 127
 162:	88 e3       	ldi	r24, 0x38	; 56
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x86>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x90>
 170:	00 00       	nop
		_delay_ms(25);
		q = (q << 1);

		PORTC = q;
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	88 b9       	out	0x08, r24	; 8
		dibujarDigito(cont % 10);
 176:	c7 01       	movw	r24, r14
 178:	0e 94 4a 00 	call	0x94	; 0x94 <dibujarDigito>
 17c:	2f e7       	ldi	r18, 0x7F	; 127
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0xa2>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0xac>
 18c:	00 00       	nop
		_delay_ms(25);
		q = (q << 1);

		cont++;
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	ac cf       	rjmp	.-168    	; 0xea <main+0xa>

00000192 <__divmodhi4>:
 192:	97 fb       	bst	r25, 7
 194:	07 2e       	mov	r0, r23
 196:	16 f4       	brtc	.+4      	; 0x19c <__divmodhi4+0xa>
 198:	00 94       	com	r0
 19a:	07 d0       	rcall	.+14     	; 0x1aa <__divmodhi4_neg1>
 19c:	77 fd       	sbrc	r23, 7
 19e:	09 d0       	rcall	.+18     	; 0x1b2 <__divmodhi4_neg2>
 1a0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__udivmodhi4>
 1a4:	07 fc       	sbrc	r0, 7
 1a6:	05 d0       	rcall	.+10     	; 0x1b2 <__divmodhi4_neg2>
 1a8:	3e f4       	brtc	.+14     	; 0x1b8 <__divmodhi4_exit>

000001aa <__divmodhi4_neg1>:
 1aa:	90 95       	com	r25
 1ac:	81 95       	neg	r24
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	08 95       	ret

000001b2 <__divmodhi4_neg2>:
 1b2:	70 95       	com	r23
 1b4:	61 95       	neg	r22
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255

000001b8 <__divmodhi4_exit>:
 1b8:	08 95       	ret

000001ba <__tablejump2__>:
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	05 90       	lpm	r0, Z+
 1c0:	f4 91       	lpm	r31, Z
 1c2:	e0 2d       	mov	r30, r0
 1c4:	09 94       	ijmp

000001c6 <__udivmodhi4>:
 1c6:	aa 1b       	sub	r26, r26
 1c8:	bb 1b       	sub	r27, r27
 1ca:	51 e1       	ldi	r21, 0x11	; 17
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <__udivmodhi4_ep>

000001ce <__udivmodhi4_loop>:
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	a6 17       	cp	r26, r22
 1d4:	b7 07       	cpc	r27, r23
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <__udivmodhi4_ep>
 1d8:	a6 1b       	sub	r26, r22
 1da:	b7 0b       	sbc	r27, r23

000001dc <__udivmodhi4_ep>:
 1dc:	88 1f       	adc	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	5a 95       	dec	r21
 1e2:	a9 f7       	brne	.-22     	; 0x1ce <__udivmodhi4_loop>
 1e4:	80 95       	com	r24
 1e6:	90 95       	com	r25
 1e8:	bc 01       	movw	r22, r24
 1ea:	cd 01       	movw	r24, r26
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
