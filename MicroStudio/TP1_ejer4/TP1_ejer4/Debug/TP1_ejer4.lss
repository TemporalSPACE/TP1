
TP1_ejer4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d0  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cc  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d5  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000337  00000000  00000000  00001b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	5a 00       	.word	0x005a	; ????
  6a:	5d 00       	.word	0x005d	; ????
  6c:	60 00       	.word	0x0060	; ????
  6e:	63 00       	.word	0x0063	; ????
  70:	66 00       	.word	0x0066	; ????
  72:	69 00       	.word	0x0069	; ????
  74:	6c 00       	.word	0x006c	; ????
  76:	6f 00       	.word	0x006f	; ????
  78:	72 00       	.word	0x0072	; ????
  7a:	75 00       	.word	0x0075	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a6 30       	cpi	r26, 0x06	; 6
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  9c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <dibujarDigito>:
#include <util/delay.h> // Retardos por software ? Macros: depende de F_CPU
#define DELAY 2.5 // Retardo en milisegundos de cada display de 7 segentos

// Metodo que se encarga de setear los displays para mostrar los numeros
void dibujarDigito(int num){
	switch (num){
  a4:	8a 30       	cpi	r24, 0x0A	; 10
  a6:	91 05       	cpc	r25, r1
  a8:	10 f5       	brcc	.+68     	; 0xee <dibujarDigito+0x4a>
  aa:	fc 01       	movw	r30, r24
  ac:	ec 5c       	subi	r30, 0xCC	; 204
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	0c 94 40 01 	jmp	0x280	; 0x280 <__tablejump2__>
		case 0:
			PORTB = 0b00111111;
  b4:	8f e3       	ldi	r24, 0x3F	; 63
  b6:	85 b9       	out	0x05, r24	; 5
			break;
  b8:	08 95       	ret
		case 1:
			PORTB = 0b00000110;
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	85 b9       	out	0x05, r24	; 5
			break;
  be:	08 95       	ret
		case 2:
			PORTB = 0b01011011;
  c0:	8b e5       	ldi	r24, 0x5B	; 91
  c2:	85 b9       	out	0x05, r24	; 5
			break;
  c4:	08 95       	ret
		case 3:
			PORTB = 0b01001111;
  c6:	8f e4       	ldi	r24, 0x4F	; 79
  c8:	85 b9       	out	0x05, r24	; 5
			break;
  ca:	08 95       	ret
		case 4:
			PORTB = 0b01100110;
  cc:	86 e6       	ldi	r24, 0x66	; 102
  ce:	85 b9       	out	0x05, r24	; 5
			break;
  d0:	08 95       	ret
		case 5:
			PORTB = 0b01101101;
  d2:	8d e6       	ldi	r24, 0x6D	; 109
  d4:	85 b9       	out	0x05, r24	; 5
			break;
  d6:	08 95       	ret
		case 6:
			PORTB = 0b01111101;
  d8:	8d e7       	ldi	r24, 0x7D	; 125
  da:	85 b9       	out	0x05, r24	; 5
			break;
  dc:	08 95       	ret
		case 7:
			PORTB = 0b00000111;
  de:	87 e0       	ldi	r24, 0x07	; 7
  e0:	85 b9       	out	0x05, r24	; 5
			break;
  e2:	08 95       	ret
		case 8:
			PORTB = 0b01111111;
  e4:	8f e7       	ldi	r24, 0x7F	; 127
  e6:	85 b9       	out	0x05, r24	; 5
			break;
  e8:	08 95       	ret
		case 9:
			PORTB = 0b01101111;
  ea:	8f e6       	ldi	r24, 0x6F	; 111
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <leerEntrada>:
			break;
	}
}

// Funcion para la lectura de los botones con control de rebote
uint8_t leerEntrada(int* cont, int corriendo){
  f0:	fc 01       	movw	r30, r24
  f2:	86 2f       	mov	r24, r22
		static int contSTART = 0;
		static int contSTOP = 0;
		static int contRESET = 0;
		
		// Establece las mascaras de los botones
		START = PIND & 0b00000001;
  f4:	39 b1       	in	r19, 0x09	; 9
		STOP = PIND & 0b00000010;
  f6:	29 b1       	in	r18, 0x09	; 9
  f8:	22 70       	andi	r18, 0x02	; 2
		RESET = PIND & 0b00000100;
  fa:	99 b1       	in	r25, 0x09	; 9
  fc:	94 70       	andi	r25, 0x04	; 4
		
		// Si presiona el boton de START
		if (START) {
  fe:	30 ff       	sbrs	r19, 0
 100:	0e c0       	rjmp	.+28     	; 0x11e <leerEntrada+0x2e>
			contSTART++;
 102:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <contSTART.1749>
 106:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <contSTART.1749+0x1>
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <contSTART.1749+0x1>
 112:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <contSTART.1749>
			
			// Si el contador alcanza el numero 3 se considera el boton presionado
			if (contSTART == 3) {
 116:	43 30       	cpi	r20, 0x03	; 3
 118:	51 05       	cpc	r21, r1
 11a:	39 f4       	brne	.+14     	; 0x12a <leerEntrada+0x3a>
 11c:	05 c0       	rjmp	.+10     	; 0x128 <leerEntrada+0x38>
				corriendo = 1;
				START = 0;
			}
		}
		else {
			contSTART = 0;
 11e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <contSTART.1749+0x1>
 122:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contSTART.1749>
 126:	01 c0       	rjmp	.+2      	; 0x12a <leerEntrada+0x3a>
			contSTART++;
			
			// Si el contador alcanza el numero 3 se considera el boton presionado
			if (contSTART == 3) {
				// Reanudo el timer
				corriendo = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
		else {
			contSTART = 0;
		}
		
		// Si presiona el boton de STOP
		if (STOP){
 12a:	22 23       	and	r18, r18
 12c:	71 f0       	breq	.+28     	; 0x14a <leerEntrada+0x5a>
			contSTOP++;
 12e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <contSTOP.1750>
 132:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <contSTOP.1750+0x1>
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <contSTOP.1750+0x1>
 13e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <contSTOP.1750>
			
			// Si el contador alcanza el numero 3 se considera el boton presionado
			if (contSTOP == 3) {
 142:	23 30       	cpi	r18, 0x03	; 3
 144:	31 05       	cpc	r19, r1
 146:	39 f4       	brne	.+14     	; 0x156 <leerEntrada+0x66>
 148:	05 c0       	rjmp	.+10     	; 0x154 <leerEntrada+0x64>
				corriendo = 0;
				STOP = 0;
			}
		}
		else {
			contSTOP = 0;
 14a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <contSTOP.1750+0x1>
 14e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <contSTOP.1750>
 152:	01 c0       	rjmp	.+2      	; 0x156 <leerEntrada+0x66>
			contSTOP++;
			
			// Si el contador alcanza el numero 3 se considera el boton presionado
			if (contSTOP == 3) {
				// Detiene el timer
				corriendo = 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
		else {
			contSTOP = 0;
		}
		
		// Si presiona el boton de RESET
		if (RESET) {
 156:	99 23       	and	r25, r25
 158:	89 f0       	breq	.+34     	; 0x17c <leerEntrada+0x8c>
			contRESET++;
 15a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// Si el contador alcanza el numero 3 se considera el boton presionado
			if (contRESET == 3) {
 16e:	23 30       	cpi	r18, 0x03	; 3
 170:	31 05       	cpc	r19, r1
 172:	41 f4       	brne	.+16     	; 0x184 <leerEntrada+0x94>
				// Hace el RESET:
				// - Se detiene el timer
				// - Se resetea el contador interno
	
				corriendo = 0;
				*cont = 0;	
 174:	11 82       	std	Z+1, r1	; 0x01
 176:	10 82       	st	Z, r1
			if (contRESET == 3) {
				// Hace el RESET:
				// - Se detiene el timer
				// - Se resetea el contador interno
	
				corriendo = 0;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
				*cont = 0;	
				RESET = 0;			
			}
		}
		else {
			contRESET = 0;
 17c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		return corriendo;
}
 184:	08 95       	ret

00000186 <main>:

/* Funcion main */
int main (void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <main+0x6>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	/* Setup */
	DDRD = 0xF8; // Seteamos los 3 bits menos signicativos como entrada (bit de RESET, bit de STOP y bit de START)
 190:	88 ef       	ldi	r24, 0xF8	; 248
 192:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF; // Seteamos todos los bits como salida
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // Seteamos todos los bits como salida
 198:	84 b9       	out	0x04, r24	; 4

	uint8_t q; // Nibble de control de encendido de los displays
	int cont = 0; // Contador del reloj en centesimas de segundo
 19a:	1a 82       	std	Y+2, r1	; 0x02
 19c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t corriendo = 0;
 19e:	f1 2c       	mov	r15, r1
	/* Loop */
	while(1)
	{		
			
		q = 0b00000001; // Establece para el encendido del primer display
		PORTC = q; // Activa el primer display
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	88 b9       	out	0x08, r24	; 8
		dibujarDigito((cont / 1000)%10);
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	68 ee       	ldi	r22, 0xE8	; 232
 1aa:	73 e0       	ldi	r23, 0x03	; 3
 1ac:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 1b0:	cb 01       	movw	r24, r22
 1b2:	0a e0       	ldi	r16, 0x0A	; 10
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	b8 01       	movw	r22, r16
 1b8:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 1bc:	0e 94 52 00 	call	0xa4	; 0xa4 <dibujarDigito>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	97 e2       	ldi	r25, 0x27	; 39
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x3e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x44>
 1ca:	00 00       	nop
		
		_delay_ms(DELAY);
		
		q = (q << 1); // Establece para el encendido del segundo display
		PORTC = q; // Activa el segundo display
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	88 b9       	out	0x08, r24	; 8
		dibujarDigito((cont / 100)%10);
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	64 e6       	ldi	r22, 0x64	; 100
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 1dc:	cb 01       	movw	r24, r22
 1de:	b8 01       	movw	r22, r16
 1e0:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 1e4:	0e 94 52 00 	call	0xa4	; 0xa4 <dibujarDigito>
 1e8:	8f e0       	ldi	r24, 0x0F	; 15
 1ea:	97 e2       	ldi	r25, 0x27	; 39
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x66>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x6c>
 1f2:	00 00       	nop
		
		_delay_ms(DELAY);
		
		q = (q << 1); // Establece para el encendido del tercer display
		PORTC = q; // Activa el tercer display
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	88 b9       	out	0x08, r24	; 8
		dibujarDigito((cont / 10)%10);
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	b8 01       	movw	r22, r16
 1fe:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	b8 01       	movw	r22, r16
 206:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 20a:	0e 94 52 00 	call	0xa4	; 0xa4 <dibujarDigito>
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	97 e2       	ldi	r25, 0x27	; 39
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x8c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x92>
 218:	00 00       	nop
		
		_delay_ms(DELAY);
		
		q = (q << 1); // Establece para el encendido del cuarto display
		PORTC = q; // Activa el cuarto display
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	88 b9       	out	0x08, r24	; 8
		dibujarDigito(cont % 10);
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	b8 01       	movw	r22, r16
 224:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 228:	0e 94 52 00 	call	0xa4	; 0xa4 <dibujarDigito>
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	97 e2       	ldi	r25, 0x27	; 39
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xaa>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xb0>
 236:	00 00       	nop
		
		_delay_ms(DELAY);

		corriendo = leerEntrada(&cont, corriendo);
 238:	6f 2d       	mov	r22, r15
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	0e 94 78 00 	call	0xf0	; 0xf0 <leerEntrada>
 244:	f8 2e       	mov	r15, r24
		
		if (corriendo) 
 246:	88 23       	and	r24, r24
 248:	09 f4       	brne	.+2      	; 0x24c <main+0xc6>
 24a:	aa cf       	rjmp	.-172    	; 0x1a0 <main+0x1a>
			cont++;
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	a4 cf       	rjmp	.-184    	; 0x1a0 <main+0x1a>

00000258 <__divmodhi4>:
 258:	97 fb       	bst	r25, 7
 25a:	07 2e       	mov	r0, r23
 25c:	16 f4       	brtc	.+4      	; 0x262 <__divmodhi4+0xa>
 25e:	00 94       	com	r0
 260:	07 d0       	rcall	.+14     	; 0x270 <__divmodhi4_neg1>
 262:	77 fd       	sbrc	r23, 7
 264:	09 d0       	rcall	.+18     	; 0x278 <__divmodhi4_neg2>
 266:	0e 94 46 01 	call	0x28c	; 0x28c <__udivmodhi4>
 26a:	07 fc       	sbrc	r0, 7
 26c:	05 d0       	rcall	.+10     	; 0x278 <__divmodhi4_neg2>
 26e:	3e f4       	brtc	.+14     	; 0x27e <__divmodhi4_exit>

00000270 <__divmodhi4_neg1>:
 270:	90 95       	com	r25
 272:	81 95       	neg	r24
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	08 95       	ret

00000278 <__divmodhi4_neg2>:
 278:	70 95       	com	r23
 27a:	61 95       	neg	r22
 27c:	7f 4f       	sbci	r23, 0xFF	; 255

0000027e <__divmodhi4_exit>:
 27e:	08 95       	ret

00000280 <__tablejump2__>:
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	05 90       	lpm	r0, Z+
 286:	f4 91       	lpm	r31, Z
 288:	e0 2d       	mov	r30, r0
 28a:	09 94       	ijmp

0000028c <__udivmodhi4>:
 28c:	aa 1b       	sub	r26, r26
 28e:	bb 1b       	sub	r27, r27
 290:	51 e1       	ldi	r21, 0x11	; 17
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <__udivmodhi4_ep>

00000294 <__udivmodhi4_loop>:
 294:	aa 1f       	adc	r26, r26
 296:	bb 1f       	adc	r27, r27
 298:	a6 17       	cp	r26, r22
 29a:	b7 07       	cpc	r27, r23
 29c:	10 f0       	brcs	.+4      	; 0x2a2 <__udivmodhi4_ep>
 29e:	a6 1b       	sub	r26, r22
 2a0:	b7 0b       	sbc	r27, r23

000002a2 <__udivmodhi4_ep>:
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	5a 95       	dec	r21
 2a8:	a9 f7       	brne	.-22     	; 0x294 <__udivmodhi4_loop>
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	bc 01       	movw	r22, r24
 2b0:	cd 01       	movw	r24, r26
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
