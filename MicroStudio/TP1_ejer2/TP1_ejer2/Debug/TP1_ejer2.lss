
TP1_ejer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000750  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	6c 00       	.word	0x006c	; ????
  6a:	6f 00       	.word	0x006f	; ????
  6c:	72 00       	.word	0x0072	; ????
  6e:	75 00       	.word	0x0075	; ????
  70:	78 00       	.word	0x0078	; ????
  72:	7b 00       	.word	0x007b	; ????
  74:	7e 00       	.word	0x007e	; ????
  76:	81 00       	.word	0x0081	; ????
  78:	84 00       	.word	0x0084	; ????
  7a:	87 00       	.word	0x0087	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
#include <util/delay.h> // Retardos por software – Macros: depende de F_CPU
/* Función main */
int main (void)
{
	/* Setup */
	DDRC = 0; // 11111101 De acuerdo al valor del PINC0, DDRC va a tener un 0 en el bit0 o bit1
  94:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF; // Setea el puerto B como salida
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	/* Loop */
	char num = 0;
  9a:	20 e0       	ldi	r18, 0x00	; 0
	while(1)
	{
		if (PINC & (1<<PINC0)) // Si el PINC0 esta en 1
  9c:	30 9b       	sbis	0x06, 0	; 6
  9e:	12 c0       	rjmp	.+36     	; 0xc4 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9c e9       	ldi	r25, 0x9C	; 156
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x10>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x16>
  aa:	00 00       	nop
		{
			//PORTB = 0b1111111; 
			_delay_ms(10);
			num++;
  ac:	2f 5f       	subi	r18, 0xFF	; 255
			if(num==10){num=0;}
  ae:	2a 30       	cpi	r18, 0x0A	; 10
  b0:	09 f4       	brne	.+2      	; 0xb4 <main+0x20>
  b2:	20 e0       	ldi	r18, 0x00	; 0
			PORTB = 0x00; 
  b4:	15 b8       	out	0x05, r1	; 5
  b6:	8f e3       	ldi	r24, 0x3F	; 63
  b8:	9c e9       	ldi	r25, 0x9C	; 156
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x26>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2c>
  c0:	00 00       	nop
  c2:	ec cf       	rjmp	.-40     	; 0x9c <main+0x8>
			_delay_ms(10); 
		}
		else
		{
			switch (num){
  c4:	82 2f       	mov	r24, r18
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	91 05       	cpc	r25, r1
  cc:	38 f7       	brcc	.-50     	; 0x9c <main+0x8>
  ce:	fc 01       	movw	r30, r24
  d0:	ec 5c       	subi	r30, 0xCC	; 204
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__tablejump2__>
				case 0:
					PORTB = 0b00111111;
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	85 b9       	out	0x05, r24	; 5
					break;
  dc:	df cf       	rjmp	.-66     	; 0x9c <main+0x8>
				case 1:
					PORTB = 0b00000110;
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	85 b9       	out	0x05, r24	; 5
					break;
  e2:	dc cf       	rjmp	.-72     	; 0x9c <main+0x8>
				case 2:
				PORTB = 0b01011011;
  e4:	8b e5       	ldi	r24, 0x5B	; 91
  e6:	85 b9       	out	0x05, r24	; 5
				break;
  e8:	d9 cf       	rjmp	.-78     	; 0x9c <main+0x8>
				case 3:
				PORTB = 0b01001111;
  ea:	8f e4       	ldi	r24, 0x4F	; 79
  ec:	85 b9       	out	0x05, r24	; 5
				break;
  ee:	d6 cf       	rjmp	.-84     	; 0x9c <main+0x8>
				case 4:
				PORTB = 0b01100110;
  f0:	86 e6       	ldi	r24, 0x66	; 102
  f2:	85 b9       	out	0x05, r24	; 5
				break;
  f4:	d3 cf       	rjmp	.-90     	; 0x9c <main+0x8>
				case 5:
				PORTB = 0b01101101;
  f6:	8d e6       	ldi	r24, 0x6D	; 109
  f8:	85 b9       	out	0x05, r24	; 5
				break;
  fa:	d0 cf       	rjmp	.-96     	; 0x9c <main+0x8>
				case 6:
				PORTB = 0b01111101;
  fc:	8d e7       	ldi	r24, 0x7D	; 125
  fe:	85 b9       	out	0x05, r24	; 5
				break;
 100:	cd cf       	rjmp	.-102    	; 0x9c <main+0x8>
				case 7:
				PORTB = 0b00000111;
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	85 b9       	out	0x05, r24	; 5
				break;
 106:	ca cf       	rjmp	.-108    	; 0x9c <main+0x8>
				case 8:
				PORTB = 0b01111111;
 108:	8f e7       	ldi	r24, 0x7F	; 127
 10a:	85 b9       	out	0x05, r24	; 5
				break;
 10c:	c7 cf       	rjmp	.-114    	; 0x9c <main+0x8>
				case 9:
				PORTB = 0b01101111;
 10e:	8f e6       	ldi	r24, 0x6F	; 111
 110:	85 b9       	out	0x05, r24	; 5
				break;
 112:	c4 cf       	rjmp	.-120    	; 0x9c <main+0x8>

00000114 <__tablejump2__>:
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	05 90       	lpm	r0, Z+
 11a:	f4 91       	lpm	r31, Z
 11c:	e0 2d       	mov	r30, r0
 11e:	09 94       	ijmp

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
